delimiters{
	"(",
	")",
	"+",
	"-",
	"*",
	"\",
	",",
	"^",
	"."
}

cat statement(default,whitespace){
	<expression>
	.<method>
}

cat method(whitespace){
	<method_name><whitespace><binds>
cat }

cat method_name(clean){
	<named_string>
}


cat expression{
	<group><expression_tail>
}

cat expression_tail(optional){
	+<expression>
	-<expression>
}

cat group{
	<factor><group_tail>
}

cat group_tail(optional){
	*<group>
	/<group>
}

cat factor{
	(<expression>)
	<double>
	<named_action>
	-<factor>
}

cat double{
	\regex("\d*(|\.\d*)")\
}

cat named_action{
	<named_string><function_extension>
}

cat array_init{
	[]<named_string_init>
}

cat array_size{
	new [<integer>]
}

cat function_extension(optional){
	(\list(<expression>)\)
}

cat named_string(clean,whitespace){
	<named_char><named_string_tail><array_tail>
}

cat named_string_init(clean){
	<named_char><named_string_tail>
}

cat named_string_tail(optional,whitespace){
	<string>
}

cat named_char{
	\regex("[a-zA-Z_]")\
}

cat binds{
	<var_bind>
	<array_bind>
	<function_bind>
}

cat pre_scope(optional){
	{\list(<expression>)\}
}

cat var_bind{
	\var(<named_string_init>,<expression>,":=")\
}

cat array_bind{
	\var(<array_init>,<array_size>,":=")\<pre_scope>
}

cat array_tail(optional){
	[<integer>]
}

cat function_bind{

	\var(<create_function>,<expression>,":=")\
}

cat create_function{
	<named_string>(<named_string>)
}
