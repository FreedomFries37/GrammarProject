delimiters{
	"(",
	")",
	":"
}

cat cleans(optional){
	cleans\{\list(<string>,"	")\\}
}

cat removes(optional){
	removes\{\list(<string>,"	")\\}
}

token wildcard;
cat string(override){
	<wildcard>
}

token number_token{
	"\d+(\.\d*)?"
}

cat number{
	<number_token>
}

cat grammar(override){
	<delimiters><cleans><removes>\list(<block>,"")\
	<delimiters><removes><cleans>\list(<block>,"")\
	<cleans><delimiters><removes>\list(<block>,"")\
	<cleans><removes><delimiters>\list(<block>,"")\
	<removes><cleans><delimiters>\list(<block>,"")\
	<removes><delimiters><cleans>\list(<block>,"")\
}

cat category(override){
	cat<string><options><category_tags>\{<list_rule>\}
	token<options><token_specifier><token_endings>
	<function>
}

cat block(invisible){
	<category>
	<group>
	<macro>
}

cat category_tags(optional){
	:\list(<category_tag>)\
}

cat category_tag{
	<string>(\list(<parameter>)\)
}

cat parameter{
	<number>
	<string>
}

cat group{
	group<string>\{\list(<parameter>)\\}
	group<string>;
}

// using these *probably* means any language using them are no longer cfg
cat function{
	func<string>(\list(<lrl>)\)\{<rule>\}
}

cat lrl{
	\list(<rule_reference>,"")\
}

cat function_parameters{
	cat<string>
	token<string>
}

cat variable{
	$(<scope>:<string>)
}

cat scope{
	local
	global
}

cat rule_head{
	<variable>
	<function_call>
}

cat function_call{
	\<<string>()\>
}

cat macro{
	macro<string>(\list(<string>)\)\{<category_or_rule_list>\}
}

cat category_or_rule_list{
	\list(<category>,"")\
	\list(<rule>,"")\
}

cat rule_reference(override){
	\<<string><rule_reference_tag>\>
}

cat rule_reference_tag(optional){
	:<string>(\list(<string>)\)
}

