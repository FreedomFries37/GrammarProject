#import <standard>

delimiters{
",",
";",
"(",
")",
"{",
"}",
"[",
"]",
"*",
".",
"+",
"-",
"/",
"=",
"<",
">"
}

token(override) string;
token(override) double{
	"\d+(\.\d*)?"
}

token(override) integer{
	"\d+"
}

token true "TRUE";
token false "FALSE";
cat boolean{
	<true>
	<false>
}

cat number{
	<double>
	<double>d
}

cat named_variable{
	\regex("[a-zA-Z_]\w*")\
}

cat string_wrap{
	<string>
}

cat double_wrap{
	<double>
}

cat program(default){
	\list(<code>,"")\
}

cat block{
	\{\list(<code>,"")\\}
}

cat code{
	<conditional><statement_line>
	<conditional><block>
}

cat conditional(optional){
	if(<boolean_expression>)
	while(<boolean_expression>)
}

cat identifier{
	<string>
}

cat set_value:assert(<constant_value>){
	<named_variable>
	<method>
}

cat method{
	<named_variable>(\list(<resulting_block>)\)
}

cat variable_declare{
	<identifier><named_variable>
}

cat statement_line{
	<statement_inner>;
}

cat statement_inner{
	<variable_declare>
	<variable_set>
}

cat variable_set{
	<named_variable><set_operation><resulting_block>
}

token equality{
	"=|(\+=)|(-=)"
}

cat boolean_expression{
	<boolean_group><boolean_expression_tail>
}

cat boolean_expression_tail(optional){
	||<boolean_expression>
}

cat boolean_group{
	<boolean_factor><boolean_group_tail>
}

cat boolean_group_tail(optional){
	&&<boolean_group>
}

cat boolean_factor{
	<resulting_block><boolean_resulting_block_tail>
	!<boolean_factor>
	(<boolean_expression>)
}

cat boolean_resulting_block_tail(optional){
	<boolean_operator><resulting_block>
}

token boolean_operator_token{
	"(==)|(>=?)|(<=?)|(!=)"
}

cat boolean_operator{
	<boolean_operator_token>
}


cat set_operation{
	<equality>
}

cat resulting_block{
	<set_value><resulting_block_tail>
	\{<program>return<set_value>\}
	<constant_value>
}

cat resulting_block_tail(optional){
	.<named_variable>
	.<method>
}

cat constant_value{
	<number>
	<boolean>
	<sentence>
	<boolean_expression>
}




